import * as fabric from "fabric";
import { useEffect, useRef, useState } from "react";
import io, { Socket } from "socket.io-client";

type GameEvent = {
  type: string;
  data: any;
  roomId: string;
  userId: string;
};

type CursorPosition = {
  userId: string;
  username: string;
  x: number;
  y: number;
};

// –ü—Ä–∏—è—Ç–Ω–∞—è –ø–∞—Å—Ç–µ–ª—å–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞
const CURSOR_COLORS = [
  "#FF9AA2",
  "#FFB7B2",
  "#FFDAC1",
  "#E2F0CB",
  "#B5EAD7",
  "#C7CEEA",
  "#F8B195",
  "#F67280",
  "#C06C84",
  "#6C5B7B",
  "#355C7D",
  "#99B898",
];

export const GameCanvas = ({ roomId, username }: { roomId: string; username: string }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [socket, setSocket] = useState<Socket | null>(null);
  const fabricRef = useRef<fabric.Canvas | null>(null);
  const [brushColor, setBrushColor] = useState("#4A90E2"); // –ü—Ä–∏—è—Ç–Ω—ã–π —Å–∏–Ω–∏–π
  const [brushSize, setBrushSize] = useState(5);
  const userCursorsRef = useRef<{ [userId: string]: fabric.Text }>({});
  const cursorColorsRef = useRef<{ [userId: string]: string }>({});

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCursorColor = (userId: string) => {
    if (!cursorColorsRef.current[userId]) {
      const colorIndex = Object.keys(cursorColorsRef.current).length % CURSOR_COLORS.length;
      cursorColorsRef.current[userId] = CURSOR_COLORS[colorIndex];
    }

    console.log("cursorColorsRef: ", cursorColorsRef);
    return cursorColorsRef.current[userId];
  };

  useEffect(() => {
    const newSocket = io(import.meta.env.VITE_SERVER_URL);

    newSocket.on("connect", () => {
      console.log("Socket connected:", newSocket.id);
      newSocket.emit("joinRoom", roomId, username);
    });

    setSocket(newSocket);

    return () => {
      newSocket.disconnect();
    };
  }, [roomId, username]);

  const clearCanvas = () => {
    if (!fabricRef.current) return;

    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∫—É—Ä—Å–æ—Ä–∞–º–∏
    const objects = fabricRef.current.getObjects();
    objects.forEach((obj) => {
      if (!(obj as any).isCursor) {
        fabricRef.current?.remove(obj);
      }
    });

    fabricRef.current.backgroundColor = "#FFFFFF";
    fabricRef.current.requestRenderAll();
  };

  useEffect(() => {
    if (!canvasRef.current || !socket) return;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–æ–ª—Å—Ç–∞
      const canvas = new fabric.Canvas(canvasRef.current, {
        isDrawingMode: true,
        width: 800,
        height: 500,
        backgroundColor: "#FFFFFF",
        selection: false,
      });

      fabricRef.current = canvas;

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∏—Å—Ç–∏
      const brush = new fabric.PencilBrush(canvas);
      brush.width = brushSize;
      brush.color = brushColor;
      canvas.freeDrawingBrush = brush;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
      const handlePathCreated = (e: fabric.IEvent) => {
        if (!e.path) return;

        const path = e.path;
        const pathData = path.toObject();

        socket.emit("gameEvent", {
          type: "DRAW",
          data: pathData,
          roomId,
          userId: username,
        });
      };

      canvas.on("path:created", handlePathCreated);

      const updateMyCursor = (userId: string, name: string, x: number, y: number) => {
        if (!fabricRef.current) return;

        const cursorColor = getCursorColor(userId);
        const isLocalUser = name === username;
        console.log(Object.keys(userCursorsRef.current)?.length);
        // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        if (userCursorsRef.current[userId]) {
          const cursor = userCursorsRef.current[userId];
          cursor.set({
            left: x + 15,
            top: y - 15,
            visible: true, // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –≤–∏–¥–∏–º
          });
        }
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å–æ—Ä
        else {
          const displayName = isLocalUser ? `${name} (You)` : name;
          const cursor = new fabric.Text(displayName, {
            left: x + 15,
            top: y - 15,
            fontSize: 14,
            fill: cursorColor,
            fontWeight: "bold",
            shadow: "rgba(0,0,0,0.3) 1px 1px 2px",
            selectable: false,
            evented: false,
            isCursor: true,
          });

          userCursorsRef.current[userId] = cursor;
          fabricRef.current.add(cursor);
        }

        fabricRef.current.requestRenderAll();
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ (—Å –¥–µ–±–∞—É–Ω—Å–æ–º)
      let lastMove = 0;
      const handleMouseMove = (e: fabric.IEvent) => {
        if (!e.pointer) return;

        // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π –∫—É—Ä—Å–æ—Ä
        updateMyCursor(username, username, e.pointer.x, e.pointer.y);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º
        if (Date.now() - lastMove > 50) {
          lastMove = Date.now();
          socket.emit("cursorMove", {
            roomId,
            x: e.pointer.x,
            y: e.pointer.y,
            username,
          });
        }
      };

      canvas.on("mouse:move", handleMouseMove);
      updateMyCursor(username, username, canvas.width! / 2, canvas.height! / 2);

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∫—É—Ä—Å–æ—Ä–∞

      //   const updateMyCursor = (x: number, y: number) => {
      //     if (!fabricRef.current) return;

      //     const myUserId = "me"; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–≤–æ–µ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
      //     const cursorColor = getCursorColor(myUserId);

      //     const createCursor = (text: string, x: number, y: number, color: string) => {
      //       return new fabric.FabricText(text, {
      //         left: x + 15,
      //         top: y - 15,
      //         fontSize: 14,
      //         fill: color,
      //         fontWeight: "bold",
      //         shadow: "rgba(0,0,0,0.3) 1px 1px 2px",
      //         selectable: false,
      //         evented: false,
      //         isCursor: true, // üî¥ –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∫—É—Ä—Å–æ—Ä
      //       });
      //     };

      //     if (!userCursorsRef.current[myUserId]) {
      //       const cursor = createCursor(username, x, y, cursorColor);
      //       userCursorsRef.current[myUserId] = cursor;
      //       fabricRef.current.add(cursor);
      //     }

      //     fabricRef.current.requestRenderAll();

      //     // if (userCursorsRef.current[myUserId]) {
      //     //   const cursor = userCursorsRef.current[myUserId];
      //     //   cursor.set({
      //     //     left: x + 15,
      //     //     top: y - 15,
      //     //   });
      //     // } else {
      //     //   const cursor = new fabric.FabricText(username, {
      //     //     left: x + 15,
      //     //     top: y - 15,
      //     //     fontSize: 14,
      //     //     fill: cursorColor,
      //     //     fontWeight: "bold",
      //     //     shadow: "rgba(0,0,0,0.3) 1px 1px 2px",
      //     //     selectable: false,
      //     //     evented: false,
      //     //   });

      //     //   userCursorsRef.current[myUserId] = cursor;
      //     //   fabricRef.current.add(cursor);
      //     // }
      //     // fabricRef.current.requestRenderAll();
      //   };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è

      const handleGameUpdate = (data: GameEvent) => {
        if (data.type === "DRAW" && fabricRef.current) {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º –∫–∏—Å—Ç–∏
          const path = new fabric.Path(data.data.path, {
            stroke: data.data.stroke || brushColor,
            strokeWidth: data.data.strokeWidth || brushSize,
            strokeLineCap: "round",
            strokeLineJoin: "round",
            fill: "",
            selectable: false,
            evented: false,
          });

          fabricRef.current.add(path);
          fabricRef.current.renderAll();
        }
      };
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–æ–≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      //   const handleCursorMove = (position: CursorPosition) => {
      //     if (!fabricRef.current) return;

      //     // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è
      //     if (position.username === username) return;

      //     const userId = position.username; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ ID
      //     const cursorColor = getCursorColor(userId);

      //     if (userCursorsRef.current[userId]) {
      //       const cursor = userCursorsRef.current[userId];
      //       cursor.set({
      //         left: position.x + 15,
      //         top: position.y - 15,
      //       });
      //     } else {
      //       const cursor = new fabric.Text(position.username, {
      //         left: position.x + 15,
      //         top: position.y - 15,
      //         fontSize: 14,
      //         fill: cursorColor,
      //         fontWeight: "bold",
      //         shadow: "rgba(0,0,0,0.3) 1px 1px 2px",
      //         selectable: false,
      //         evented: false,
      //       });

      //       userCursorsRef.current[userId] = cursor;
      //       fabricRef.current.add(cursor);
      //     }

      //     fabricRef.current.requestRenderAll();
      //   };
      const handleCursorMove = (position: CursorPosition) => {
        // –î–ª—è —á—É–∂–∏—Ö –∫—É—Ä—Å–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ ID
        updateMyCursor(position.username, position.username, position.x, position.y);
      };

      const handleClearCanvas = () => {
        clearCanvas();
      };

      socket.on("gameUpdate", handleGameUpdate);
      socket.on("cursorMove", handleCursorMove);
      socket.on("clearCanvas", handleClearCanvas);

      const handleUserConnected = (newUsername: string) => {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        socket.emit("requestCursorPosition", roomId, newUsername);
      };

      const handleRequestCursorPosition = (requestedUsername: string) => {
        if (requestedUsername !== username) return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        const canvas = fabricRef.current;
        if (canvas && canvas.upperCanvasEl) {
          const rect = canvas.upperCanvasEl.getBoundingClientRect();
          socket.emit("cursorMove", {
            roomId,
            x: rect.width / 2,
            y: rect.height / 2,
            username,
          });
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const handleUserDisconnected = (disconnectedUsername: string) => {
        if (fabricRef.current && userCursorsRef.current[disconnectedUsername]) {
          fabricRef.current.remove(userCursorsRef.current[disconnectedUsername]);
          delete userCursorsRef.current[disconnectedUsername];
          fabricRef.current.requestRenderAll();
        }
      };

      socket.on("userConnected", handleUserConnected);
      socket.on("requestCursorPosition", handleRequestCursorPosition);
      socket.on("userDisconnected", handleUserDisconnected);

      return () => {
        if (fabricRef.current) {
          fabricRef.current.off("path:created", handlePathCreated);
          fabricRef.current.off("mouse:move", handleMouseMove);
          fabricRef.current.dispose();
        }
        socket.off("gameUpdate", handleGameUpdate);
        socket.off("cursorMove", handleCursorMove);
        socket.off("userDisconnected", handleUserDisconnected);
        socket.off("clearCanvas", handleClearCanvas); // üî¥ –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        socket.off("userConnected", handleUserConnected);
        socket.off("requestCursorPosition", handleRequestCursorPosition);
      };
    } catch (error) {
      console.error("Canvas initialization error:", error);
    }
  }, [socket, username, userCursorsRef?.current]); // –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∏—Å—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (fabricRef.current) {
      fabricRef.current.freeDrawingBrush.color = brushColor;
      fabricRef.current.freeDrawingBrush.width = brushSize;
    }
  }, [brushColor, brushSize]);

  return (
    <div className="game-area">
      <div className="canvas-container">
        <canvas ref={canvasRef} width={800} height={500} className="drawing-canvas" />
      </div>

      <div className="drawing-controls">
        <div className="control-group">
          <label>–¶–≤–µ—Ç –∫–∏—Å—Ç–∏:</label>
          <input type="color" value={brushColor} onChange={(e) => setBrushColor(e.target.value)} />
        </div>

        <div className="control-group">
          <label>–†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏:</label>
          <input type="range" min="1" max="20" value={brushSize} onChange={(e) => setBrushSize(parseInt(e.target.value))} />
          <span>{brushSize}px</span>
        </div>

        <button
          onClick={() => {
            if (fabricRef.current) {
              fabricRef.current.clear();
              fabricRef.current.backgroundColor = "#FFFFFF";
              socket?.emit("clearCanvas", roomId);
              // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —á—É–∂–∏–µ –∫—É—Ä—Å–æ—Ä—ã
              Object.entries(userCursorsRef.current).forEach(([userId, cursor]) => {
                if (userId !== "me") {
                  fabricRef.current?.remove(cursor);
                  delete userCursorsRef.current[userId];
                }
              });
              fabricRef.current.requestRenderAll();
            }
          }}
          className="clear-button"
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç
        </button>
      </div>
    </div>
  );
};
